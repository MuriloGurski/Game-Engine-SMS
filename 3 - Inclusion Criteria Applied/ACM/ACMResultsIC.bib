@inproceedings{10.1145/3623504.3623570,
author = {van Rozen, Riemer},
title = {Game Engine Wizardry for Programming Mischief},
year = {2023},
isbn = {9798400703997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3623504.3623570},
doi = {10.1145/3623504.3623570},
abstract = {Programming grants individuals the capability to design, create, and bring ideas to life. To improve their skills, programmers require powerful languages and programming environments for understanding the impact of gradual code changes. We investigate how modern game engine technology can be leveraged for creating visual input and feedback mechanisms that drive exploratory and live programming.  In this paper, we report experiences on creating a visual programming environment for Machinations, a domain-specific language for game design. We share initial findings on how to automate the development of graph- and tree- based editors in Godot, an open source game engine. Our results show that today’s game engine technology provides a solid foundation for future programming language research.},
booktitle = {Proceedings of the 2nd ACM SIGPLAN International Workshop on Programming Abstractions and Interactive Notations, Tools, and Environments},
pages = {36–43},
numpages = {8},
keywords = {programming environments, live programming, language workbenches, game engines},
location = {Cascais, Portugal},
series = {PAINT 2023},
}

@inproceedings{10.1145/3643658.3643918,
author = {Pinto Gomez, Carlos and Petrillo, Fabio},
title = {Improving Bug Reproduction through Game Engine State Analysis},
year = {2024},
isbn = {9798400705618},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3643658.3643918},
doi = {10.1145/3643658.3643918},
abstract = {In video game development, bug detection and reproduction are crucial for productivity. Automating these tasks has been a longstanding goal in the industry to reduce quality management costs. While Artificial Intelligence (AI) offers avenues for automation, its integration into the game development cycle is often cost-prohibitive.This paper presents a novel detection technique that leverages data readily available from the game engine and a time-saving tool for bug reproduction. Our results demonstrate a significant improvement in the bug detection and reproduction workflow, reducing the time spent by testers and developers by one-third compared to manual methods without compromising on manual testers' detection accuracy.The primary aim of this paper is to introduce the technique and validate its compatibility with game engine workflows. Utilizing the Unity engine, the developed tool specifically targets camera clipping bugs. Thus, the proposed technique, while effective, is somewhat limited in scope. For broader applications, source code adaptations are necessary to integrate with other game engines and detect various bug types.},
booktitle = {Proceedings of the ACM/IEEE 8th International Workshop on Games and Software Engineering},
pages = {28–35},
numpages = {8},
keywords = {video games, bugs, quality assurance, testing},
location = {Lisbon, Portugal},
series = {GAS '24},
}

@inproceedings{10.1145/3590837.3590936,
author = {Chugh, Dr. Aarti and Jain, Dr. Charu and Kumar, Dr. Anil},
title = {Design of Artificial Intelligence Enabled Game Engine},
year = {2023},
isbn = {9781450399937},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3590837.3590936},
doi = {10.1145/3590837.3590936},
abstract = {Game engines are primarily designed for the development of video games but can also be used as rendering engines for 2D and 3D graphics. They include all relevant libraries and supported programs. Developers can use them to construct games for game consoles and other types of computer softwares. They also aid in the porting of games to multiple platforms. Developers look for platforms which are easily available and provide facilities to create impressive, interesting and animated games. But these software are difficult to run on everyday machines, especially laptops, limiting their use to professionals with dedicated systems. This paper discusses design of new game engine with all the standard features of a rendering engine. The artificial intelligence (AI) aspect of the engine requires rendering of visual data at a lower resolution to improve performance and then using trained Deep Networks to upscale the image to the native resolution of the user's monitor. The AI will ensure that upscaling will be adding detail rather than averaging the nearby pixels.CCS CONCEPTS • Software and its engineering • Software creation and management • Designing software • Software implementation planning • Software design techniques},
booktitle = {Proceedings of the 4th International Conference on Information Management &amp; Machine Intelligence},
articleno = {99},
numpages = {5},
keywords = {Artificial Intelligence, Deep Learning, Game Design, Game Engine, Image Rendering},
location = {Jaipur, India},
series = {ICIMMI '22},
}

@inproceedings{10.1145/3631085.3631225,
author = {De Oliveira, Saulo Soares and Souza, Carlos Henrique R. and Silva, Jefferson Carvalho and Carvalho, S\'ergio T.},
title = {Towards Scalable Cloud Gaming Systems: Decoupling Physics from the Game Engine},
year = {2024},
isbn = {9798400716270},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3631085.3631225},
doi = {10.1145/3631085.3631225},
abstract = {By leveraging cloud computing resources, cloud gaming, also known as Games-as-a-Service (GaaS), has emerged as a new computer game delivery paradigm that promises gaming anywhere, anytime, on any device. In this regard, game engine architectures are one of the main objects of study when adapting digital games to cloud gaming. However, most of the proposed cloud gaming architectures cannot take full advantage of cloud computing resources to offer system scalability due to a monolith design. In this paper, we evaluate the impacts of a distributed architecture in terms of system performance by employing the service-oriented architecture paradigm to offload the game physics calculations as a decoupled system. As a differential, our work contributes to the discussion by implementing a proof-of-concept to compare the game engine performance between the monolith and distributed approaches by utilizing a modern public cloud provider, which as far as we know, has not yet been done in the literature. As a result, the distributed approach had a better performance in computation-intensive physics calculations scenarios. In this case, the communication overhead is outweighed by performance gains, as the physics engine was deployed on a compute-optimized VM. This further indicates the benefits of decoupling game engine systems, not only better game performance but also taking a step further for a scalable cloud gaming system, which can scale better both vertically and horizontally.},
booktitle = {Proceedings of the 22nd Brazilian Symposium on Games and Digital Entertainment},
pages = {151–160},
numpages = {10},
keywords = {Cloud computing, Cloud gaming, Distributed architecture, Games-as-a-Service, Scalability},
location = {Rio Grande (RS), Brazil},
series = {SBGames '23},
}

@inproceedings{10.1145/3524458.3547126,
author = {Mazzuca, Laura and Garbugli, Andrea and Sabbioni, Andrea and Bujari, Armir and Corradi, Antonio},
title = {Towards a Resource-aware Middleware Support for Distributed Game Engine Design},
year = {2022},
isbn = {9781450392846},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3524458.3547126},
doi = {10.1145/3524458.3547126},
abstract = {Recently, we are witnessing an increasing interest in a paradigm shift in the way video games are designed and implemented. Starting from an era where a single developer was in charge of the whole creative process, we have moved now toward extremely large groups with a multi-layered organisation. Moreover, today’s game engines suffer from a number of architectural constraints, and will not likely be able to meet the flexibility and scalability required by game developers of the next generation. This increasing complexity, the tremendous growth of projects size, and the rapidly evolving AR/VR trend, call for the adoption of agile development and cost-effective management approaches leveraging on distributed computing environments and primitives. In this work, we present the concept of a distributed game engine architecture, which relies on a resource-aware middleware solution providing run-time quality support to components spanning edge-cloud environments.},
booktitle = {Proceedings of the 2022 ACM Conference on Information Technology for Social Good},
pages = {409–413},
numpages = {5},
keywords = {Edge Cloud Computing, Gaming as a Service, Microservices},
location = {Limassol, Cyprus},
series = {GoodIT '22},
}

@inproceedings{10.1145/3643658.3643921,
author = {Strodick, Kathleen and Schattkowsky, Tim},
title = {Visual Scripting in Unity: A Comparative Analysis of Existing Frameworks},
year = {2024},
isbn = {9798400705618},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3643658.3643921},
doi = {10.1145/3643658.3643921},
abstract = {This paper explores the use of visual scripting languages in game engines, particularly in Unity, comparing different third-party frameworks. The typical applications of visual scripting in games are examined and compared, including dialog, Non-Playable Character behavior, camera movement, and more. Unity's built-in visual scripting tool, formerly Bolt, is examined in detail and compared to various third-party commercial frameworks such as Node Canvas, Playmaker, Behavior Designer and Flow Canvas.},
booktitle = {Proceedings of the ACM/IEEE 8th International Workshop on Games and Software Engineering},
pages = {44–49},
numpages = {6},
keywords = {visual scripting, visual languages, game development, unity, end user programming},
location = {Lisbon, Portugal},
series = {GAS '24},
}

@inproceedings{10.1145/3578244.3583738,
author = {Nayrolles, Mathieu},
title = {Pushing the Limits of Video Game Performance: A Performance Engineering Perspective},
year = {2023},
isbn = {9798400700682},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3578244.3583738},
doi = {10.1145/3578244.3583738},
abstract = {Ubisoft constantly pushes the boundaries of game development to create immersive worlds that capture the imagination of millions of players worldwide. To achieve this, performance engineering plays a crucial role in ensuring that games run smoothly on various platforms and devices. In this talk, we will explore the latest advancements in the field of performance engineering for video games, focusing on runtime performance, network optimization, backend and database optimization, and cloud gaming. We will discuss how machine learning techniques enhance classical profiling and optimize game engine scheduling.Additionally, we will address the challenges of deterministic replication of assets between clients and optimizing micro-services for cloud gaming experiences. Lastly, we will touch on the importance of performance engineering for non-code aspects of game development, such as animation, textures, props, and assets.},
booktitle = {Proceedings of the 2023 ACM/SPEC International Conference on Performance Engineering},
pages = {1},
numpages = {1},
keywords = {performance engineering, video games},
location = {Coimbra, Portugal},
series = {ICPE '23},
}

@inproceedings{10.1145/3579654.3579752,
author = {Zhang, Xinyuan and Zhang, Xinyou},
title = {Based on Navmesh to implement AI intelligent pathfinding in three-dimensional maps in UE4},
year = {2023},
isbn = {9781450398336},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3579654.3579752},
doi = {10.1145/3579654.3579752},
abstract = {Abstract: The development of science and technology has led to the development of the game industry. As the mainstream development engine of the current three-dimensional game, UE4 is popular with game developers for its powerful rendering technology and model processing technology. There will be a large number of non-player characters (NPC, non-player character) in the game, and these AI-controlled characters are an important way for developers to interact with users. Among them, pathfinding is the most important part of the game's AI character, which gives the AI character vitality, so that the AI character can interact with the player, chase, and automatically complete the movement to the target point. Pathfinding is the core function of an AI character, and there are many current pathfinding methods, such as Dijstra algorithm, best-first search algorithm, A-star algorithm. Most of these pathfinding algorithms are used in 2D static maps, but there is no detailed description of 3D pathfinding by pathfinding algorithms in UE4. This paper first introduces and compares several map pathfinding models, then experimentally compares different pathfinding algorithms, and then uses blueprint programming to implement AI role pathfinding in the three-dimensional map in UE4 based on the optimal performance algorithm. Finally, the overall experimental results are summarized and sorted out, and the direction for future development is pointed out.},
booktitle = {Proceedings of the 2022 5th International Conference on Algorithms, Computing and Artificial Intelligence},
articleno = {93},
numpages = {5},
keywords = {A-star, Blueprint, Navmesh, Unreal Engine 4},
location = {Sanya, China},
series = {ACAI '22},
}

@inproceedings{10.1145/3631085.3631238,
author = {Borges, Rodrigo Campos and Malheiros, Marcelo de Gomensoro and Billa, Cleo Zanella and Pias, Marcelo Rita and Bicho, Alessandro de Lima},
title = {An Open-Source Framework Using WebRTC for Online Multiplayer Gaming},
year = {2024},
isbn = {9798400716270},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3631085.3631238},
doi = {10.1145/3631085.3631238},
abstract = {Currently, most network topologies used in online games to connect players are client-server, even for browser-based games. This work evaluates an alternative approach, describing the implementation of a hybrid peer-to-peer (P2P) architecture. We have developed the open-source Proton framework for multiplayer online games, using the browser-based Web Real-Time Communication (WebRTC) technology and running on the Unity game engine. As a case study, the same prototype game was built over both topologies: a client-server using the Photon Unity Networking (PUN) and the other using our proposed framework. We detail our implementation and then analyze networking metrics in two scenarios. Later, we show that the results are promising and assess that the WebRTC API is mature enough to serve as the basis for online multiplayer games.},
booktitle = {Proceedings of the 22nd Brazilian Symposium on Games and Digital Entertainment},
pages = {143–150},
numpages = {8},
keywords = {WebRTC, multiplayer games, peer-to-peer communication},
location = {Rio Grande (RS), Brazil},
series = {SBGames '23},
}

@inproceedings{10.1145/3543873.3585572,
author = {Mehanna, Naif and Rudametkin, Walter},
title = {Caught in the Game: On the History and Evolution of Web Browser Gaming},
year = {2023},
isbn = {9781450394192},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3543873.3585572},
doi = {10.1145/3543873.3585572},
abstract = {Web browsers have come a long way since their inception, evolving from a simple means of displaying text documents over the network to complex software stacks with advanced graphics and network capabilities. As personal computers grew in popularity, developers jumped at the opportunity to deploy cross-platform games with centralized management and a low barrier to entry. Simply going to the right address is now enough to start a game. From text-based to GPU-powered 3D games, browser gaming has evolved to become a strong alternative to traditional console and mobile-based gaming, targeting both casual and advanced gamers. Browser technology has also evolved to accommodate more demanding applications, sometimes even supplanting functions typically left to the operating system. Today, websites display rich, computationally intensive, hardware-accelerated graphics, allowing developers to build ever-more impressive applications and games. In this paper, we present the evolution of browser gaming and the technologies that enabled it, from the release of the first text-based games in the early 1990s to current open-world and game-engine-powered browser games. We discuss the societal impact of browser gaming and how it has allowed a new target audience to access digital gaming. Finally, we review the potential future evolution of the browser gaming industry.},
booktitle = {Companion Proceedings of the ACM Web Conference 2023},
pages = {601–609},
numpages = {9},
keywords = {browser games, game engines, web browsers, web history},
location = {Austin, TX, USA},
series = {WWW '23 Companion},
}

@inproceedings{10.1145/3587423.3595537,
author = {Liu, Baoquan and Wang, Minxuan and Yang, Yifan and Shao, Yuewei},
title = {Building a Real-Time System on GPUs for Simulation and Rendering of Realistic 3D Liquid in Video Games},
year = {2023},
isbn = {9798400701450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587423.3595537},
doi = {10.1145/3587423.3595537},
abstract = {Modern video games employ a variety of sophisticated algorithms to produce groundbreaking 3D rendering of water, which are pushing the visual boundaries and interactive experience of rich virtual environments. However, simulation and rendering of a large number of water particles is very time consuming and it is very hard to achieve real-time frame rate (due to the huge computational cost required), e.g., those found in feature movies and offline products [Flip Fluids2022], or tools (e.g., Houdini and Blender). That is why most water visual effects in modern games are either simulated as only a 2D shallow-water in which simulation is calculated in 2D grid and projected onto the heightfield, as in [Fluid Flux 2022], or are baked at preprocessing stage which does not allow the player to dynamically interact with the liquid at runtime, as a result, lots of the fun of interactivity is lost.This course will discuss the state-of-the-art and production-proven techniques involved in building a real-time system on GPUs for simulation and rendering of realistic 3D liquid with millions of particles. It also discusses how to integrate the system into modern game engines (like UE5), with some show-cases of real applications in gaming environments.},
booktitle = {ACM SIGGRAPH 2023 Courses},
articleno = {4},
numpages = {23},
location = {Los Angeles, California},
series = {SIGGRAPH '23},
}

@article{10.1145/3672089.3672101,
author = {Arnedo-Moreno, Joan and Cooper, Kendra M. L. and Lin, Dayi},
title = {Emerging Advanced Technologies for Game Engineering},
year = {2024},
issue_date = {July 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/3672089.3672101},
doi = {10.1145/3672089.3672101},
abstract = {In this paper, the outcomes of the 8th International Workshop on Games and Software Engineering (GAS 2024)1 are reported. The one-day workshop has been held as part of the 46th International Conference on Software Engineering (ICSE 2024) in Lisbon, Portugal on April 14, 2024. The workshop programme includes two exciting keynotes discussing topics related to harnessing video game simulations to generate content and locate bugs, and the experience of maintaining a popular FOSS library, raylib. There are three research paper sessions. The first relates to automation in game engineering; the second explores testing and quality assurance; and the third discusses specification and quality of service. The conclusion of the workshop is anchored by a panel of four researchers, educators, and practitioners discussing the current strengths and limitations of large language models in game engineering.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {jul},
pages = {37–41},
numpages = {5},
}

@inproceedings{10.1145/3586182.3616627,
author = {De Vidal Flores, Eduard and Yildirim, Caglar and Harrell, D. Fox},
title = {E4UnityIntegration-MIT: An Open-Source Unity Plug-in for Collecting Physiological Data using Empatica E4 during Gameplay},
year = {2023},
isbn = {9798400700965},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3586182.3616627},
doi = {10.1145/3586182.3616627},
abstract = {Physiological measurement of player experience (PX) during gameplay has been of increasing interest within game research circles. A commonly-used non-invasive wearable device for physiological measurement is the Empatica E4 wristband, which offers multiple physiological metrics, ranging from electrodermal activity to heart rate. That said, the E4’s integration with popular game engines such as Unity 3D presents certain challenges due to non-obvious critical bugs in the library and limited documentation applicability within the Unity context. In this paper, we present an open-source Unity plug-in designed to mitigate the challenges associated with integrating the E4 into Unity projects: E4UnityIntegration-MIT. The plug-in exposes the E4’s API for interfacing with Unity C# scripts, thereby enabling realtime data collection and monitoring. E4UnityIntegration-MIT also provides the affordance of saving the E4 data into an external file for data analysis purposes.},
booktitle = {Adjunct Proceedings of the 36th Annual ACM Symposium on User Interface Software and Technology},
articleno = {49},
numpages = {3},
keywords = {Empatica E4, Unity, affective gaming, plugin, psychophysiological measures},
location = {San Francisco, CA, USA},
series = {UIST '23 Adjunct},
}

@article{10.1145/3662003,
author = {Sissler, John},
title = {Enhancing Non-Player Characters in Unity 3D using GPT-3.5},
year = {2024},
issue_date = {September 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {3},
url = {https://doi.org/10.1145/3662003},
doi = {10.1145/3662003},
abstract = {This case study presents a comprehensive integration process of OpenAI's GPT-3.5 large language model into Unity 3D to enhance non-player characters (NPCs) in video games and interactive applications. The study aims to develop an architecture and open source software framework that enables NPCs to engage in dynamic real-time interactions with players and other characters. The background and motivation for the study are provided, highlighting the existing limitations of traditional NPC programming and the potential of advanced natural language models such as GPT-3.5 to overcome these limitations. The methodology section outlines the step-by-step process, covering framework design and preparation, core architecture development, humanoid avatar integration and animation, and important feature extensions. The progression of framework design and implementation is described, emphasizing key architectural concepts, design patterns, and essential classes and interfaces. The results of the case study are discussed, focusing on the valuable insights gained and the implications for future advancements. Lessons learned from the integration process are shared, along with suggestions for potential improvements and directions for future research. This case study provides a practical resource for game developers and researchers interested in leveraging advanced natural language processing capabilities to create more immersive and interactive NPC experiences in Unity 3D environments.},
journal = {ACM Games},
month = {aug},
articleno = {25},
numpages = {16},
keywords = {Non-player characters (NPCs), Unity 3D, GPT-3.5, large language model, natural language processing, video games, interactive applications, framework design, architectural concepts, real-time interactions, immersive experiences},
}