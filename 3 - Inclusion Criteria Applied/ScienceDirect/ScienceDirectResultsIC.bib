@article{ADENIYI20242996,
title = {Development of Two Dimension (2D) Game Engine with Finite State Machine (FSM) Based Artificial Intelligence (AI) Subsystem},
journal = {Procedia Computer Science},
volume = {235},
pages = {2996-3006},
year = {2024},
note = {International Conference on Machine Learning and Data Engineering (ICMLDE 2023)},
issn = {1877-0509},
doi = {https://doi.org/10.1016/j.procs.2024.04.283},
url = {https://www.sciencedirect.com/science/article/pii/S1877050924009621},
author = {Abidemi Emmanuel Adeniyi and Biswajit Brahma and Marion Olubunmi Adebiyi and Joseph Bamidele Awotunde and Rasheed Gbenga Jimoh and Enoch Olasinde and Anjan Bandyopadhyay},
keywords = {Artificial intelligence, 2D game engine, Finite state machine, software},
abstract = {With Al becoming more and more relevant in today’s world, this project aims to develop a 2D game engine with an Al subsystem for state-driven agents, which is rarely implemented by a lot of 2D engines out there. In this study, a 2D game engine was designed with an FSM (Finite State Machine)--based AL subsystem using state-driven game agents. The engine was implemented using the Javascript programming language and the WebGL 2.0 graphics library/API. It is targeted at web-based games/simulations. Components and subsystems include physics, audio, math, rendering, and AI (based on finite-state machines). The FSM-based AI subsystem is a solution aimed at reducing the ambiguity and performance hits associated with creating 2D game AI in the naive approach. The AI subsystem creates an interface for 2D games to be created with a common paradigm, and simulated with a great level of realism. The state machine used in this study is used to represent a variety of behaviours, such as wandering, attacking, and fleeing. The following conclusions were drawn as regards the impact of the AI approach used on rendering performance; the naive approach to implementing game AI is also compared with the FSM approach in terms of rendering (frames per second/ FPS, or frame rate). With the naive approach (vector math) being used to implement AI, there was a drop in the rendering frame rate to 50 FPS. The FSM approach didn’t affect the frame rate, which is usually at 60FPS. With a well-developed FSM (Finite State Machine), game agents can transition between states easily as a response to user input or stimulus from the game environment. The proposed method was tested by creating a prototype game with the 2D game engine. The prototype game was a straightforward side-scrolling platformer featuring a cast of non-player characters (NPCs). This approach to implementing 2D game AI goes a long way toward improving performance and mitigating ambiguity in the code.},
}
@article{VIRTANEN2020375,
title = {Interactive dense point clouds in a game engine},
journal = {ISPRS Journal of Photogrammetry and Remote Sensing},
volume = {163},
pages = {375-389},
year = {2020},
issn = {0924-2716},
doi = {https://doi.org/10.1016/j.isprsjprs.2020.03.007},
url = {https://www.sciencedirect.com/science/article/pii/S0924271620300691},
author = {Juho-Pekka Virtanen and Sylvie Daniel and Tuomas Turppa and Lingli Zhu and Arttu Julin and Hannu Hyyppä and Juha Hyyppä},
keywords = {Point cloud, Game engine, VR},
abstract = {With the development of 3D measurement systems, dense colored point clouds are increasingly available. However, up to now, their use in interactive applications has been restricted by the lack of support for point clouds in game engines. In addition, many of the existing applications for point clouds lack the capacity for fluent user interaction and application development. In this paper, we present the development and architecture of a game engine extension facilitating the interactive visualization of dense point clouds. The extension allows the development of game engine applications where users edit and interact with point clouds. To demonstrate the capabilities of the developed extension, a virtual reality head-mounted display is used and the rendering performance is evaluated. The result shows that the developed tools are sufficient for supporting real-time 3D visualization and interaction. Several promising use cases can be envisioned, including both the use of point clouds as 3D assets in interactive applications and leveraging the game engine point clouds in geomatics.},
}
@article{BERGER20152913,
title = {CFD Post-processing in Unity3D},
journal = {Procedia Computer Science},
volume = {51},
pages = {2913-2922},
year = {2015},
note = {International Conference On Computational Science, ICCS 2015},
issn = {1877-0509},
doi = {https://doi.org/10.1016/j.procs.2015.05.476},
url = {https://www.sciencedirect.com/science/article/pii/S1877050915012843},
author = {Matthias Berger and Verina Cristie},
keywords = {CFD post-processing, Unity3D, urban climate, urban designs, visualization},
abstract = {In architecture and urban design, urban climate on is a strong design criterion for outdoor thermal comfort and building's energy performance. Evaluating the effect of buildings on the local climate and vice versa is done by computational fluid dynamics (CFD) methods. The results from CFD are typically visualized through post-processing software closely related to pre-processing and simulation software. The built-in functions are made for engineers and thus, it lacks user-friendliness for real-time exploration of results for architects. To bridge the gap between architect and engineer we propose visualizations based on game engine technology. This paper demonstrates the implementation of CFD to Unity3D conversion and weather data visualization.},
}
@article{ULLMANN2025100832,
title = {SyDRA: An approach to understand game engine architecture},
journal = {Entertainment Computing},
volume = {52},
pages = {100832},
year = {2025},
issn = {1875-9521},
doi = {https://doi.org/10.1016/j.entcom.2024.100832},
url = {https://www.sciencedirect.com/science/article/pii/S1875952124002003},
author = {Gabriel C. Ullmann and Yann-Gaël Guéhéneuc and Fabio Petrillo and Nicolas Anquetil and Cristiano Politowski},
keywords = {Game engines, Coupling, Impact analysis, Controlled experiment},
abstract = {Game engines are tools to facilitate video game development. They provide graphics, sound, and physics simulation features, which would have to be otherwise implemented by developers. Even though essential for modern commercial video game development, game engines are complex and developers often struggle to understand their architecture, leading to maintainability and evolution issues that negatively affect video game productions. In this paper, we present the Subsystem-Dependency Recovery Approach (SyDRA), which helps game engine developers understand game engine architecture and therefore make informed game engine development choices. By applying this approach to 10 open-source game engines, we obtain architectural models that can be used to compare game engine architectures and identify and solve issues of excessive coupling and folder nesting. Through a controlled experiment, we show that the inspection of the architectural models derived from SyDRA enables developers to complete tasks related to architectural understanding and impact analysis in less time and with higher correctness than without these models.},
}